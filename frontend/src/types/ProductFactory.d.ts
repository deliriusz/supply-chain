/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ProductFactoryInterface extends ethers.utils.Interface {
  functions: {
    "changeProductState(uint256,uint8)": FunctionFragment;
    "create(string,uint256,uint256,string)": FunctionFragment;
    "getNftAddress()": FunctionFragment;
    "getProduct(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellProduct(uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeProductState",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellProduct",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeProductState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ProductCreated(string,uint256,uint256,string)": EventFragment;
    "ProductSold(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductSold"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ProductCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string] & {
    _name: string;
    _initialPrice: BigNumber;
    _extId: BigNumber;
    _nftUri: string;
  }
>;

export type ProductSoldEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    _forPrice: BigNumber;
    _extId: BigNumber;
    _to: string;
  }
>;

export class ProductFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProductFactoryInterface;

  functions: {
    changeProductState(
      _extId: BigNumberish,
      _newState: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create(
      _name: string,
      _initialPrice: BigNumberish,
      _extId: BigNumberish,
      _nftUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNftAddress(overrides?: CallOverrides): Promise<[string]>;

    getProduct(
      _extId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, BigNumber] & {
          state: number;
          name: string;
          initialPrice: BigNumber;
        }
      ]
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: CallOverrides): Promise<[void]>;

    sellProduct(
      _extId: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(arg0: string, overrides?: CallOverrides): Promise<[void]>;
  };

  changeProductState(
    _extId: BigNumberish,
    _newState: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create(
    _name: string,
    _initialPrice: BigNumberish,
    _extId: BigNumberish,
    _nftUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNftAddress(overrides?: CallOverrides): Promise<string>;

  getProduct(
    _extId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber] & {
      state: number;
      name: string;
      initialPrice: BigNumber;
    }
  >;

  onERC721Received(
    arg0: string,
    arg1: string,
    tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  sellProduct(
    _extId: BigNumberish,
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(arg0: string, overrides?: CallOverrides): Promise<void>;

  callStatic: {
    changeProductState(
      _extId: BigNumberish,
      _newState: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      _name: string,
      _initialPrice: BigNumberish,
      _extId: BigNumberish,
      _nftUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getNftAddress(overrides?: CallOverrides): Promise<string>;

    getProduct(
      _extId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        state: number;
        name: string;
        initialPrice: BigNumber;
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellProduct(
      _extId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(arg0: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ProductCreated(string,uint256,uint256,string)"(
      _name?: string | null,
      _initialPrice?: null,
      _extId?: BigNumberish | null,
      _nftUri?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        _name: string;
        _initialPrice: BigNumber;
        _extId: BigNumber;
        _nftUri: string;
      }
    >;

    ProductCreated(
      _name?: string | null,
      _initialPrice?: null,
      _extId?: BigNumberish | null,
      _nftUri?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        _name: string;
        _initialPrice: BigNumber;
        _extId: BigNumber;
        _nftUri: string;
      }
    >;

    "ProductSold(uint256,uint256,address)"(
      _forPrice?: BigNumberish | null,
      _extId?: BigNumberish | null,
      _to?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { _forPrice: BigNumber; _extId: BigNumber; _to: string }
    >;

    ProductSold(
      _forPrice?: BigNumberish | null,
      _extId?: BigNumberish | null,
      _to?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { _forPrice: BigNumber; _extId: BigNumber; _to: string }
    >;
  };

  estimateGas: {
    changeProductState(
      _extId: BigNumberish,
      _newState: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create(
      _name: string,
      _initialPrice: BigNumberish,
      _extId: BigNumberish,
      _nftUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getProduct(
      _extId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    sellProduct(
      _extId: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeProductState(
      _extId: BigNumberish,
      _newState: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create(
      _name: string,
      _initialPrice: BigNumberish,
      _extId: BigNumberish,
      _nftUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProduct(
      _extId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellProduct(
      _extId: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
